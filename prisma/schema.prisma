// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String               @id @default(cuid())
  email               String               @unique
  firstName           String?
  lastName            String?
  nickname            String               @unique
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  movieReviews        MovieReview[]
  movieStandoutScenes MovieStandoutScene[]
  movieStandoutQuotes MovieStandoutQuote[]
}

model Movie {
  id                  String               @id @default(cuid())
  originalTitle       String
  releaseDate         DateTime
  runtime             Int
  posterPath          String
  imdbId              String
  releaseYear         Int
  genre               String
  overview            String?
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  movieReviews        MovieReview[]
  movieStandoutScenes MovieStandoutScene[]
  movieStandoutQuotes MovieStandoutQuote[]
}

// the categories questions fall under
model MovieReviewQuestionCategory {
  id          String                @id @default(cuid())
  name        String                @unique
  description String?
  questions   MovieReviewQuestion[]
}

// the questions for a review
model MovieReviewQuestion {
  id                   String                              @id @default(cuid())
  question             String
  categoryId           String
  category             MovieReviewQuestionCategory         @relation(fields: [categoryId], references: [id])
  options              MovieReviewQuestionResponseOption[]
  movieReviewResponses MovieReviewResponse[]
}

// the multiple choice options for a question
model MovieReviewQuestionResponseOption {
  id                   String                @id @default(cuid())
  questionId           String
  question             MovieReviewQuestion   @relation(fields: [questionId], references: [id])
  optionText           String
  movieReviewResponses MovieReviewResponse[]
}

// review submitted by a user
model MovieReview {
  id                  String                   @id @default(cuid())
  movieId             String
  movie               Movie                    @relation(fields: [movieId], references: [id])
  userId              String
  user                User                     @relation(fields: [userId], references: [id])
  createdAt           DateTime                 @default(now())
  updatedAt           DateTime                 @updatedAt
  responses           MovieReviewResponse[]
  finalVerdict        MovieReviewFinalVerdict?
  movieStandoutScenes MovieStandoutScene[]
  movieStandoutQuotes MovieStandoutQuote[]
}

// response of a user to a question in a review
model MovieReviewResponse {
  id               String                             @id @default(cuid())
  reviewId         String
  review           MovieReview                        @relation(fields: [reviewId], references: [id])
  questionId       String
  question         MovieReviewQuestion                @relation(fields: [questionId], references: [id])
  selectedOptionId String?
  selectedOption   MovieReviewQuestionResponseOption? @relation(fields: [selectedOptionId], references: [id])
  preference       PreferenceType // "Amazingüëç/Horribleüëé/Don't careü§∑" about this aspect
}

model MovieReviewFinalVerdict {
  id                 String         @id @default(cuid())
  reviewId           String         @unique
  review             MovieReview    @relation(fields: [reviewId], references: [id])
  overallOpinion     OverallOpinion // (Masterpiece, Meh, Garbage)
  moodTags           String[]
  additionalComments String? // Optional long text response for additional comments
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt
}

model MovieStandoutScene {
  id          String      @id @default(cuid())
  movieId     String
  movie       Movie       @relation(fields: [movieId], references: [id])
  reviewId    String
  review      MovieReview @relation(fields: [reviewId], references: [id])
  userId      String
  user        User        @relation(fields: [userId], references: [id])
  scene       String
  description String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model MovieStandoutQuote {
  id          String      @id @default(cuid())
  movieId     String
  movie       Movie       @relation(fields: [movieId], references: [id])
  reviewId    String
  review      MovieReview @relation(fields: [reviewId], references: [id])
  userId      String
  user        User        @relation(fields: [userId], references: [id])
  quote       String
  description String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

enum PreferenceType {
  YES
  NO
  DONT_CARE
}

enum OverallOpinion {
  MASTERPIECE
  MEH
  GARBAGE
}
